name: Release

on:
  schedule:
    - cron: "1 1 1 * *"
  push:
    branches:
    - '**'

jobs:
  u-build:
    name: build_ubuntu
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Env
      run: |
        sudo apt update
        # # fix:
        # # The following packages have unmet dependencies:...
        sudo apt-get install aptitude

        export packages=$packages"autopoint automake autotools-dev libtool gettext "
        export packages=$packages"build-essential libelf-dev binutils-dev libdwarf-dev gcc g++ git "
        export packages=$packages$(apt-cache search -n libc6-dev-amd64 | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libssl dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libxml2 dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n zlib | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n mingw-w64 | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n dpkg-dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n pkg-config | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n openssl dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n nettle dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n gcrypt dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n gnutls dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n gmp dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n glibc | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n unistring dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n p11-kit | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libssh2 dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libsqlite3 dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n expat | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n c-ares | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libcppunit dev | cut -d " " -f 1 | tr "\n" " ")

        sudo aptitude -y install $packages

        export pwd=$(pwd)
        
        git clone --depth=1 https://github.com/c-ares/c-ares.git tmp
        cd tmp
        autoreconf -i
        ./configure --disable-shared
        make
        sudo make install
        cd $pwd
        rm -rf tmp

    - name: Build
      run: |
        git clone --depth=1 https://github.com/aria2/aria2.git aria2_git
        cd aria2_git
        git apply ../patch/*.patch

        autoreconf -i
        ./configure \
            --without-gnutls \
            ARIA2_STATIC=yes \

        make
        cd ../
        cp aria2_git/src/aria2c* ./
        rm -rf aria2_git
        strip aria2c*

    - name: zip
      run: zip -q -r ubuntu.zip *
      
    - name: Set Release Name
      run: |
        echo "TIME=$(date +"%Y-%m-%d")" >> $GITHUB_ENV
        echo "HASH=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
        
    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: AutoBuild-${{ env.TIME }}-${{ env.HASH }}
        files: ubuntu.zip

  w-build:
    name: build_windows
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Env
      run: |
        sudo apt update
        # # fix:
        # # The following packages have unmet dependencies:...
        sudo apt-get install aptitude

        export packages=$packages"autopoint automake autotools-dev libtool gettext "
        export packages=$packages"build-essential libelf-dev binutils-dev libdwarf-dev gcc g++ git "
        export packages=$packages$(apt-cache search -n libc6-dev-amd64 | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libssl dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libxml2 dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n zlib | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n mingw-w64 | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n dpkg-dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n pkg-config | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n openssl dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n nettle dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n gcrypt dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n gnutls dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n gmp dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n glibc | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n unistring dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n p11-kit | cut -d " " -f 1 | tr "\n" " ")
        # export packages=$packages$(apt-cache search -n libssh2 dev | cut -d " " -f 1 | tr "\n" " ")
        # export packages=$packages$(apt-cache search -n libsqlite3 dev | cut -d " " -f 1 | tr "\n" " ")
        # export packages=$packages$(apt-cache search -n expat | cut -d " " -f 1 | tr "\n" " ")
        # export packages=$packages$(apt-cache search -n c-ares | cut -d " " -f 1 | tr "\n" " ")
        # export packages=$packages$(apt-cache search -n libcppunit dev | cut -d " " -f 1 | tr "\n" " ")

        sudo aptitude -y install $packages

        export HOST=x86_64-w64-mingw32
        export PREFIX=/usr/$HOST
        export pwd=$(pwd)
        
        git clone --depth=1 https://github.com/c-ares/c-ares.git tmp
        cd tmp
        autoreconf -fi
        CC=$HOST-gcc CXX=$HOST-g++ ./configure --host=$HOST --prefix=$PREFIX --disable-shared
        make
        sudo make install
        cd $pwd
        rm -rf tmp

        git clone --depth=1 https://github.com/libexpat/libexpat.git tmp
        cd tmp/expat
        ./buildconf.sh
        CC=$HOST-gcc CXX=$HOST-g++ ./configure --host=$HOST --prefix=$PREFIX --enable-shared=no
        make
        sudo make install
        cd $pwd
        rm -rf tmp

        git clone --depth=1 https://github.com/sqlite/sqlite.git tmp
        cd tmp
        ./configure
        make amalgamation-tarball
        cd mkpkg_tmp_dir/sqlite-autoconf*
        CC=$HOST-gcc CXX=$HOST-g++ ./configure --host=$HOST --prefix=$PREFIX
        make
        sudo make install
        cd $pwd
        rm -rf tmp

        curl -o tmp.tar.gz -L "https://downloads.sourceforge.net/project/cppunit/cppunit/1.12.1/cppunit-1.12.1.tar.gz?ts=1616748686&r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fcppunit%2Ffiles%2Fcppunit%2F1.12.1%2Fcppunit-1.12.1.tar.gz%2Fdownload"
        tar -zxvf tmp.tar.gz
        cd cppunit-1.12.1/
        CC=$HOST-gcc CXX=$HOST-g++ ./configure --host=$HOST --prefix=$PREFIX --enable-shared=no
        make
        sudo make install
        cd $pwd
        rm -rf tmp.tar.gz cppunit-1.12.1

    - name: Build
      run: |
        export HOST=x86_64-w64-mingw32
        export PREFIX=/usr/$HOST

        git clone --depth=1 https://github.com/aria2/aria2.git aria2_git
        cd aria2_git
        git apply ../patch/*.patch
        autoreconf -i
        
        # https://github.com/c-ares/c-ares/blob/master/INSTALL.md#important-static-c-ares-usage-note
        ./configure \
            --host=$HOST \
            --prefix=$PREFIX \
            ARIA2_STATIC=yes \
            CFLAGS="-DCARES_STATICLIB" \
            CPPFLAGS="-I$PREFIX/include" \
            PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"

        make
        cd ../
        cp aria2_git/src/aria2c* ./
        rm -rf aria2_git
        strip aria2c*

    - name: Zip
      run: zip -q -r windows.zip *
    
    - name: Set Release Name
      run: |
        echo "TIME=$(date +"%Y-%m-%d")" >> $GITHUB_ENV
        echo "HASH=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
        
    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: AutoBuild-${{ env.TIME }}-${{ env.HASH }}
        files: windows.zip
